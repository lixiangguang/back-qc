import React, { useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport styles from '../styles/DataStatistics.module.css';\n\n// 定义统计数据类型\ntype StatsData = {\n  totalUsers: number;\n  totalVideos: number;\n  digitalCharacters: number;\n  totalRechargeAmount: number;\n  userGrowthData: {\n    date: string;\n    newUsers: number;\n    activeUsers: number;\n  }[];\n  contentData: {\n    date: string;\n    videos: number;\n  }[];\n  rechargeData: {\n    month: string;\n    amount: number;\n  }[];\n};\n\nconst DataStatistics: React.FC = () => {\n  const router = useRouter();\n  const [isClient, setIsClient] = useState(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [statsData, setStatsData] = useState<StatsData | null>(null);\n\n  // Check if we're on the client side before accessing localStorage\n  useEffect(() => {\n    setIsClient(true);\n    const userPhone = localStorage.getItem('userPhone');\n    \n    if (!userPhone) {\n      router.push('/login');\n      return;\n    }\n\n    // Fetch stats data from API\n    const fetchStats = async () => {\n      try {\n        const response = await fetch('/api/stats');\n        const data = await response.json();\n        setStatsData(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('获取统计数据失败:', error);\n        setLoading(false);\n      }\n    };\n    \n    fetchStats();\n  }, [router]);\n\n  // Helper function to calculate y-position for user growth chart\n  const calculateYPosition = (value: number, max: number = 250, height: number = 200): number => {\n    return height - (value / max) * height + 30;\n  };\n\n  // Generate SVG path for user growth chart\n  const generateUserGrowthPath = () => {\n    if (!statsData || !statsData.userGrowthData || statsData.userGrowthData.length === 0) return '';\n    \n    const maxNewUsers = Math.max(...statsData.userGrowthData.map(d => d.newUsers));\n    const maxActiveUsers = Math.max(...statsData.userGrowthData.map(d => d.activeUsers));\n    const maxUsers = Math.max(maxNewUsers, maxActiveUsers);\n    \n    return statsData.userGrowthData.map((item, index) => {\n      const x = 30 + index * 60;\n      const yNew = calculateYPosition(item.newUsers, maxUsers, 200);\n      const yActive = calculateYPosition(item.activeUsers, maxUsers, 200);\n      return `${index === 0 ? 'M' : 'L'} ${x},${yNew} ${x},${yActive}`;\n    }).join(' ');\n  };\n\n  if (loading) {\n    return <div className={styles.loading}>加载中...</div>;\n  }\n  \n  if (!statsData) {\n    return <div className={styles.loading}>无法加载数据</div>;\n  }\n\n  // Calculate max values for scaling\n  const maxNewUsers = Math.max(...statsData.userGrowthData.map(d => d.newUsers));\n  const maxActiveUsers = Math.max(...statsData.userGrowthData.map(d => d.activeUsers));\n  const maxUsers = Math.max(maxNewUsers, maxActiveUsers);\n  const maxVideos = Math.max(...statsData.contentData.map(d => d.videos));\n  const maxRecharge = Math.max(...statsData.rechargeData.map(d => d.amount));\n\n  // Generate SVG paths for charts\n  const newUsersPath = generateUserGrowthPath();\n  const videosPath = statsData.contentData.map((item, index) => {\n    const x = 30 + index * 60;\n    const y = calculateYPosition(item.videos, maxVideos, 200);\n    return `${index === 0 ? 'M' : 'L'} ${x},${y}`;\n  }).join(' ');\n\n  return (\n    <div className={styles.container}>\n      <Head>\n        <title>数据统计报表 - 青宸道养智能体中心</title>\n        <meta name=\"description\" content=\"青宸道养智能体中心 - 数据统计报表页面\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n\n      {isClient ? (\n        <>\n          <div className={styles.layout}>\n            {/* Sidebar */}\n            <div className={styles.sidebar}>\n              <div className={styles.logo}>\n                <span className={styles.logoText}>青宸道养智能体中心</span>\n              </div>\n              <nav className={styles.nav}>\n                <Link href=\"/\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>🏠</i>\n                    <span>开始工作</span>\n                  </div>\n                </Link>\n                <Link href=\"/inspiration\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>💡</i>\n                    <span>选题灵感</span>\n                  </div>\n                </Link>\n                <Link href=\"/content\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>📝</i>\n                    <span>内容生产</span>\n                  </div>\n                </Link>\n                <Link href=\"/publish\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>🔄</i>\n                    <span>作品发布</span>\n                  </div>\n                </Link>\n                <Link href=\"/user-management\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>👥</i>\n                    <span>用户管理</span>\n                  </div>\n                </Link>\n                <Link href=\"/tasks\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>✅</i>\n                    <span>每日任务</span>\n                  </div>\n                </Link>\n                <Link href=\"/data-statistics\" className={styles.active}>\n                  <div className={styles.navItemActive}>\n                    <i className={styles.icon}>📈</i>\n                    <span>数据统计</span>\n                  </div>\n                </Link>\n                <Link href=\"/system-settings\">\n                  <div className={styles.navItem}>\n                    <i className={styles.icon}>⚙️</i>\n                    <span>系统设置</span>\n                  </div>\n                </Link>\n              </nav>\n            </div>\n\n            {/* Main Content */}\n            <div className={styles.content}>\n              <div className={styles.statsHeader}>\n                <h1 className={styles.pageTitle}>数据统计</h1>\n                <div className={styles.statsCount}>\n                  总用户数: {statsData.totalUsers} | 总视频数: {statsData.totalVideos} | 数字人数量: {statsData.digitalCharacters}\n                </div>\n              </div>\n              \n              {/* User Growth Chart */}\n              <div className={styles.chartContainer}>\n                <h2 className={styles.chartTitle}>用户增长趋势</h2>\n                <div className={styles.legend}>\n                  <div className={styles.legendItem}>\n                    <div className={styles.legendLine} style={{ backgroundColor: '#405DF9' }}></div>\n                    <span className={styles.legendText}>新增用户</span>\n                  </div>\n                  <div className={styles.legendItem}>\n                    <div className={styles.legendLine} style={{ backgroundColor: '#ED589D' }}></div>\n                    <span className={styles.legendText}>活跃用户</span>\n                  </div>\n                </div>\n                \n                <div className={styles.lineChart}>\n                  <div className={styles.chartArea}>\n                    <div className={styles.yAxis}>\n                      {[0, 1, 2, 3, 4].map((i) => (\n                        <div key={i} className={styles.yAxisItem}>\n                          <span className={styles.yAxisLabel}>\n                            {Math.round(maxUsers / 4 * (4 - i))}\n                          </span>\n                          <div\n                            className={styles.gridLine}\n                            style={{ top: `${(i * 200) / 4}px` }}\n                          ></div>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <svg className={styles.lineSvg} viewBox={`0 0 800 200`}>\n                      <path className={styles.linePathBlue} d={newUsersPath} />\n                      <path className={styles.linePathPink} d={newUsersPath} />\n                      \n                      {statsData.userGrowthData.map((item, index) => {\n                        const x = (index / (statsData.userGrowthData.length - 1)) * 800;\n                        const yNew = 200 - (item.newUsers / maxUsers * 200);\n                        const yActive = 200 - (item.activeUsers / maxUsers * 200);\n                        \n                        return (\n                          <React.Fragment key={index}>\n                            <circle\n                              className={styles.dataPointBlue}\n                              cx={x}\n                              cy={yNew}\n                              r=\"4\"\n                            />\n                            <circle\n                              className={styles.dataPointPink}\n                              cx={x}\n                              cy={yActive}\n                              r=\"4\"\n                            />\n                          </React.Fragment>\n                        );\n                      })}\n                    </svg>\n                  </div>\n                  \n                  <div className={styles.xAxis}>\n                    {statsData.userGrowthData.map((item, index) => (\n                      <div key={index} className={styles.xAxisItem}>\n                        <span className={styles.xAxisLabel}>{item.date}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Content Production Chart */}\n              <div className={styles.chartContainer}>\n                <h2 className={styles.chartTitle}>内容生产趋势</h2>\n                <div className={styles.lineChart}>\n                  <div className={styles.chartArea}>\n                    <div className={styles.yAxis}>\n                      {[0, 1, 2, 3, 4].map((i) => (\n                        <div key={i} className={styles.yAxisItem}>\n                          <span className={styles.yAxisLabel}>\n                            {Math.round(maxVideos / 4 * (4 - i))}\n                          </span>\n                          <div\n                            className={styles.gridLine}\n                            style={{ top: `${(i * 200) / 4}px` }}\n                          ></div>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <svg className={styles.lineSvg} viewBox={`0 0 800 200`}>\n                      <path className={styles.linePathGreen} d={videosPath} />\n                      \n                      {statsData.contentData.map((item, index) => {\n                        const x = (index / (statsData.contentData.length - 1)) * 800;\n                        const y = 200 - (item.videos / maxVideos * 200);\n                        \n                        return (\n                          <circle\n                            key={index}\n                            className={styles.dataPointGreen}\n                            cx={x}\n                            cy={y}\n                            r=\"4\"\n                          />\n                        );\n                      })}\n                    </svg>\n                  </div>\n                  \n                  <div className={styles.xAxis}>\n                    {statsData.contentData.map((item, index) => (\n                      <div key={index} className={styles.xAxisItem}>\n                        <span className={styles.xAxisLabel}>{item.date}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Recharge Data */}\n              <div className={styles.chartContainer}>\n                <h2 className={styles.chartTitle}>充值统计</h2>\n                <div className={styles.totalRecharge}>\n                  <span className={styles.totalAmount}>￥{statsData.totalRechargeAmount.toLocaleString()}</span>\n                  <span className={styles.totalLabel}>总充值金额</span>\n                </div>\n                \n                <div className={styles.barChart}>\n                  <div className={styles.chartArea}>\n                    <div className={styles.yAxis}>\n                      {[0, 1, 2, 3, 4].map((i) => (\n                        <div key={i} className={styles.yAxisItem}>\n                          <span className={styles.yAxisLabel}>\n                            {Math.round(maxRecharge / 4 * (4 - i))}\n                          </span>\n                          <div\n                            className={styles.gridLine}\n                            style={{ top: `${(i * 200) / 4}px` }}\n                          ></div>\n                        </div>\n                      ))}\n                    </div>\n                    \n                    <div className={styles.bars}>\n                      {statsData.rechargeData.map((item, index) => {\n                        const barHeight = (item.amount / maxRecharge) * 200;\n                        \n                        return (\n                          <div key={index} className={styles.barGroup}>\n                            <div \n                              className={styles.bar}\n                              style={{ height: `${barHeight}px` }}\n                              data-amount={`¥${item.amount}`}\n                            ></div>\n                            <div className={styles.barLabel}>{item.month}</div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      ) : (\n        <div className={styles.loading}>加载中...</div>\n      )}\n    </div>\n  );\n};\n\nexport default DataStatistics;